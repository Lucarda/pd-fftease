

1. change all t_doubles and doubles to t_float

/* Pd 32-bit FFTease 3.0 */

1. change t_pxobject to t_object

t_object x_obj;
t_float x_f;


4. add prototypes for XXX_dsp() & XXX_perform()

void bthresher_dsp(t_bthresher *x, t_signal **sp);
t_int *bthresher_perform(t_int *w);

5. write XXX-tilde_setup

void bthresher_tilde_setup(void)
{
    t_class *c;
    c = class_new(gensym("bthresher~"), (t_newmethod)bthresher_new,
						   (t_method)bthresher_free,sizeof(t_bthresher), 0,A_GIMME,0);
	CLASS_MAINSIGNALIN(c, t_bthresher, x_f);
	class_addmethod(c,(t_method)bthresher_dsp,gensym("dsp"),0);
	class_addmethod(c,(t_method)bthresher_mute,gensym("mute"),A_FLOAT,0);
    	class_addmethod(c,(t_method)bthresher_fftinfo,gensym("fftinfo"),0);
	class_addmethod(c,(t_method)bthresher_oscbank,gensym("oscbank"),A_FLOAT,0);
	class_addmethod(c,(t_method)bthresher_transpose,gensym("transpose"),A_FLOAT,0);
	class_addmethod(c,(t_method)bthresher_synthresh,gensym("synthresh"),A_FLOAT,0);
    bthresher_class = c;
    fftease_announce(OBJECT_NAME);
}

6. comment out main() function

7. modify new() function:
	pd_new() for object_alloc()
	
	inlet_new(&x->x_obj, &x->x_obj.ob_pd,gensym("signal"), gensym("signal"));
	outlet_new(&x->x_obj, gensym("signal"));

	Make note of z_no_inplace issues
	add non-signal outlets *after* signal outlets
	add optional arguments
	x->mybang = outlet_new(&x->x_obj, gensym("bang"));
	x->m_clock = clock_new(x,(void *)sigseq_tick);
	
    if(argc > 0){ fft->N = (int) atom_getfloatarg(0, argc, argv); }
    if(argc > 1){ fft->overlap = (int) atom_getfloatarg(1, argc, argv); }

8. modify init()
	kill use of obj.z_disabled

9. modify perform() function

t_int *bthresher_perform(t_int *w)

   	t_bthresher *x = (t_bthresher *) (w[1]);
	t_float *MSPInputVector = (t_float *)(w[2]);

	if( fft->bufferStatus == EQUAL_TO_MSP_VECTOR ){
        memcpy(input, input + D, (Nw - D) * sizeof(t_float));
        memcpy(input + (Nw - D), MSPInputVector, D * sizeof(t_float));
        
		do_bthresher(x);
        
		for ( j = 0; j < D; j++ ){ *MSPOutputVector++ = output[j] * mult; }
        memcpy(output, output + D, (Nw-D) * sizeof(t_float));
        for(j = (Nw-D); j < Nw; j++){ output[j] = 0.0; }
    }
	else if( fft->bufferStatus == SMALLER_THAN_MSP_VECTOR ) {
		for( i = 0; i < operationRepeat; i++ ){
            memcpy(input, input + D, (Nw - D) * sizeof(t_float));
            memcpy(input + (Nw-D), MSPInputVector + (D*i), D * sizeof(t_float));
            
			do_bthresher(x);
			
			for ( j = 0; j < D; j++ ){ *MSPOutputVector++ = output[j] * mult; }
            memcpy(output, output + D, (Nw-D) * sizeof(t_float));
            for(j = (Nw-D); j < Nw; j++){ output[j] = 0.0; }
		}
	}
	else if( fft->bufferStatus == BIGGER_THAN_MSP_VECTOR ) {
        memcpy(internalInputVector + (operationCount * MSPVectorSize), MSPInputVector,MSPVectorSize * sizeof(t_float));
        memcpy(MSPOutputVector, internalOutputVector + (operationCount * MSPVectorSize),MSPVectorSize * sizeof(t_float));
		operationCount = (operationCount + 1) % operationRepeat;
		
		if( operationCount == 0 ) {
            memcpy(input, input + D, (Nw - D) * sizeof(t_float));
            memcpy(input + (Nw - D), internalInputVector, D * sizeof(t_float));
            
			do_bthresher(x);
			
			for ( j = 0; j < D; j++ ){ internalOutputVector[j] = output[j] * mult; }
            memcpy(output, output + D, (Nw - D) * sizeof(t_float));
            for(j = (Nw-D); j < Nw; j++){ output[j] = 0.0; }
		}
		fft->operationCount = operationCount;
	}

10. modify DSP method

void bthresher_dsp(t_bthresher *x, t_signal **sp)
{
    int reset_required = 0;
    int maxvectorsize = sys_getblksize();
    int samplerate = sys_getsr();
    
    if(!samplerate)
        return;
	t_fftease *fft = x->fft;
    if(fft->R != samplerate || fft->MSPVectorSize != maxvectorsize || fft->initialized == 0){
        reset_required = 1;
    }
	if(fft->MSPVectorSize != maxvectorsize){
		fft->MSPVectorSize = maxvectorsize;
		fftease_set_fft_buffers(fft);
	}
	if(fft->R != samplerate){
		fft->R = samplerate;
	}
    if(reset_required){
        bthresher_init(x);
    }
    if(fftease_msp_sanity_check(fft,OBJECT_NAME)) {
        dsp_add(bthresher_perform, 5, x, sp[0]->s_vec, sp[1]->s_vec, sp[2]->s_vec, sp[3]->s_vec);
    }
}


11. Remove dsp_free from free function

12. add back any messages from attributes

13. clean up vestigial code
